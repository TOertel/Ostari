Types:
Cards = Red1, Red2, Red3, Red4, Blue1, Blue2, Blue3, Blue4, Green1, Green2, Green3, Green4
Players = a, b
HandIndex = 1, 2, 3
DeckIndex = 1, 2, 3, 4, 5, 6
Ranks = 1, 2, 3, 4
Colors = Red, Blue, Green
Stacks = redstack, bluestack, greenstack

Properties:
at :: Players -> HandIndex -> Cards ()
top :: Stacks -> Cards (redstack: Red1, Red2, Red3, Red4;
                        bluestack: Blue1, Blue2, Blue3, Blue4;
                        greenstack: Green1, Green2, Green3, Green4)
color :: Cards -> Colors (Red1: red; Red2: red; Red3: red; Red4: red;
                          Green1: green; Green2: green; Green3: green; Green4: green;
                          Blue1: blue; Blue2: blue; Blue3: blue; Blue4: blue)
rank :: Cards -> Ranks (Red1: 1; Red2: 2; Red3: 3; Red4: 4;
                        Green1: 1; Green2: 2; Green3: 3; Green4: 4;
                        Blue1: 1; Blue2: 2; Blue3: 3; Blue4: 4)
stack :: Cards -> Stacks (Red1: redstack; Red2: redstack; Red3: redstack; Red4: redstack;
                        Green1: greenstack; Green2: greenstack; Green3: greenstack; Green4: greenstack;
                        Blue1: bluestack; Blue2: bluestack; Blue3: bluestack; Blue4: bluestack)
successor :: Ranks -> Ranks (1: 2; 2: 3; 3: 4; 4: 5)
deck :: DeckIndex -> Cards ()

Actions:
peek(player: Players, target: Players, i: HandIndex) 
    tell (player): Which c in Cards: at(target, i) == c

hintcolor(player: Players, col: Colors)
    tell (player): Each i in HandIndex: color(at(player, i)) == col

hintrank(player: Players, r: Ranks)
    tell (player): Each i in HandIndex: rank(at(player, i)) == r
    
play(player: Players, i: HandIndex)
{
    if (rank(at(player,i)) == successor(rank(top(stack(at(player,i))))))
    {
        top(stack(at(player,i))) = at(player,i)
    }
    else
    {
    };
    at(player,i) = Null
}

test(player: Players, i: HandIndex)
    top(stack(Blue1)) = Red1
    
Initial:
at(a,1) = Red1()
at(a,2) = Blue3()
at(a,3) = Green2()
at(b,1) = Blue2()
at(b,2) = Red3()
at(b,3) = Red2()
deck(1) = Red4()
deck(2) = Green1()
deck(3) = Blue1()
deck(4) = Blue4()
deck(5) = Green3()
deck(6) = Green4()
top(bluestack) = Blue2()

knows a:
at(b,1) = Blue2()
at(b,2) = Red3()
at(b,3) = Red2()

knows b:
at(a,1) = Red1()
at(a,2) = Blue3()
at(a,3) = Green2()


Execute:
print: facts
query: B (b): at(a,1) == Red1
query: B (a): at(a,1) == Red1
print: model
hintrank(a, 1)
hintcolor(a, red)
query: B (a): at(a,1) == Red1


Done.