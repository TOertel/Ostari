Types:
Cards = Werewolf1, Werewolf2, Troublemaker, Villager1, Villager2
Roles = Werewolf, Troublemaker, Villager
Players = a, b, c
Locations = a, b, c, center1, center2, tmp
Phases = Init, WWPhase, TMPhase, DiscussionPhase, VotingPhase, DeathPhase, Done
Constants = game
Truth = honest, lying
Count = 0, 1, 2, 3
Bool = True, False
Properties:
succ :: Count -> Count (0: 1; 1: 2; 2: 3; 3: 4; 4: 5)
max :: Constants -> Count ()
maxat :: Constants -> Locations ()
votes :: Players -> Count ()
tmpv :: Constants -> Count ()
maxvotes :: Constants -> Count ()
dead :: Players -> Bool ()
role :: Locations -> Roles ()
card :: Locations -> Cards ()
roleassignment :: Cards -> Roles (Werewolf1: Werewolf; Werewolf2: Werewolf; Troublemaker: Troublemaker; Villager1: Villager; Villager2: Villager)
phase :: Constants -> Phases ()
votefor :: Players -> Players ()
eq :: Players -> Players (a: a; b: b; c: c)
eqt :: Truth -> Truth (honest: honest; lying: lying)
top :: Stacks -> Cards (redstack: Red1, Red2, Red3, Red4, Red5;
                        bluestack: Blue1, Blue2, Blue3, Blue4, Blue5;
                        greenstack: Green1, Green2, Green3, Green4, Green5;
                        whitestack: White1, White2, White3, White4, White5;
                        yellowstack: Yellow1, Yellow2, Yellow3, Yellow4, Yellow5)


Actions:
assignCard(p: Players, c(p): Cards)
{
    precondition phase(game) == Init;
    public (p) card(p) = c;
    precondition Forall x in Players: ((eq(x) == p) or (card(x) != c) or (card(x) == Null))
}
assignRole(p: Players)
{
    public (Players) role(p) = roleassignment(card(p))
}
causeTrouble(p: Players, p1(p): Players, p2(p): Players)
{
    precondition role(p) == Troublemaker;
    precondition phase(game) == TMPhase;
    role(tmp) = role(p1);
    role(p1) = role(p2);
    role(p2) = role(tmp)
}
recognizeWerewolves(p(p): Players)
{
    precondition role(p) == Werewolf;
    precondition phase(game) == WWPhase;
    tell (p): Each p1 in Players: role(p1) == Werewolf
}
advancePhase()
{
   if (phase(game) == Init)
   {
       public (Players) phase(game) = WWPhase
   }
   else
   { 
       if (phase(game) == WWPhase)
       {
           public (Players) phase(game) = TMPhase
       }
       else 
       {
           if (phase(game) == TMPhase)
           {
               public (Players) phase(game) = DiscussionPhase
           }
           else
           {
               public (Players) phase(game) = VotingPhase
           }
       }
   }
} 
claimRoleTruth(p: Players, r: Roles)
{
       precondition role(p) == r;
       tell (Players): role(p) == r
}

claimRoleLie(p: Players, r: Roles)
{
       precondition role(p) != r;
       suspect (Players): role(p) == r   
}
vote(p: Players, v: Players)
{
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
die(p: Players)
{
    precondition (votes(p) == 2) or (votes(p) == 3);
    dead(p) = True
}
tally()
{
    public (Players) phase(game) = DeathPhase
}
finish()
{
    public (Players) phase(game) = Done
}
Initial:
phase(game) = Init()
votes(a) = 0()
votes(b) = 0()
votes(c) = 0()
tmpv(game) = 0()
max(game) = 0()
maxat(game) = tmp()
looks like (a,b,c): Initial


Execute:
print: model
assignCard(a, Werewolf1)
assignRole(a)
assignCard(b, Troublemaker)
assignRole(b)
assignCard(c, Villager1)
assignRole(c)
advancePhase()
print: facts


Done.